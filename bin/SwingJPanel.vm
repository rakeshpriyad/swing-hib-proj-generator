#if (${PACKAGE_NAME} != "")package ${PACKAGE_NAME}.form;#end

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;

import com.test.swing.spring.configuration.AppConfig;
import com.test.swing.spring.domain.${DOMAIN_CLASS_NAME};
import com.test.swing.spring.service.${DOMAIN_CLASS_NAME}Service;


public class ${DOMAIN_CLASS_NAME}Panel  extends JPanel {

	private static final long serialVersionUID = 5603217815861713654L;
	private JTable ${DOMAIN_CLASS_NAME.substring(0,1).toLowerCase()}${DOMAIN_CLASS_NAME.substring(1)}Results;
	private AbstractApplicationContext context;
	
	private JTextField txt${DOMAIN_CLASS_NAME}Id;
		
	#foreach($propEntry in $propMap.keySet())
    private JLabel lbl${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)};
    #end
    
    #foreach($propEntry in $propMap.keySet())
    private JTextField txt$propEntry.substring(0,1).toUpperCase()${propEntry.toString().substring(1)};
    #end
	
	
    #foreach( $str_const in $constMap.keySet() )
    private static final String $str_const =  "$constMap.get($str_const)";
    #end
    
        public ${DOMAIN_CLASS_NAME}Panel(){
        
        context = new AnnotationConfigApplicationContext(AppConfig.class);
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[] { 0, 0, 0, 135, 0, 0, 0, 0, 0,
				0, 0, 0, 0 };
		gridBagLayout.rowHeights = new int[] { 0, 0, 0, 0 };
		gridBagLayout.columnWeights = new double[] { 0.0, 0.0, 0.0, 1.0, 0.0,
				0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE };
		gridBagLayout.rowWeights = new double[] { 0.0, 1.0, 1.0,
				Double.MIN_VALUE };
		setLayout(gridBagLayout);

		JLabel lbl${DOMAIN_CLASS_NAME}Form = new JLabel("${DOMAIN_CLASS_NAME} Form");
		lbl${DOMAIN_CLASS_NAME}Form.setBackground(Color.LIGHT_GRAY);
		lbl${DOMAIN_CLASS_NAME}Form.setForeground(Color.BLUE);
		GridBagConstraints gbcLbl${DOMAIN_CLASS_NAME}Form = new GridBagConstraints();
		gbcLbl${DOMAIN_CLASS_NAME}Form.insets = new Insets(0, 0, 5, 5);
		gbcLbl${DOMAIN_CLASS_NAME}Form.gridx = 3;
		gbcLbl${DOMAIN_CLASS_NAME}Form.gridy = 0;
		add(lbl${DOMAIN_CLASS_NAME}Form, gbcLbl${DOMAIN_CLASS_NAME}Form);
		
		JPanel formPanel = new JPanel();
		GridBagConstraints gbcFormPanel = new GridBagConstraints();
		gbcFormPanel.gridwidth = 9;
		gbcFormPanel.insets = new Insets(0, 0, 5, 0);
		gbcFormPanel.fill = GridBagConstraints.BOTH;
		gbcFormPanel.gridx = 3;
		gbcFormPanel.gridy = 1;
		add(formPanel, gbcFormPanel);
		GridBagLayout gblFormPanel = new GridBagLayout();
		gblFormPanel.columnWidths = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
		gblFormPanel.rowHeights = new int[] { 0, 0, 0, 0, 0 };
		gblFormPanel.columnWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0,
				0.0, 0.0, Double.MIN_VALUE };
		gblFormPanel.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0,
				Double.MIN_VALUE };
		formPanel.setLayout(gblFormPanel);

		   #set( $counterY = 1)
			#foreach($propEntry in $propMap.keySet())
    		lbl${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)} = new JLabel("${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}");
    		#set( $gbc = "gbcLbl${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}" )
    		
    		GridBagConstraints $gbc = new GridBagConstraints();
    		${gbc}.insets = new Insets(0, 0, 5, 5);
			${gbc}.gridx = 2;
			${gbc}.gridy = $counterY;
			#set( $counterY = $counterY+1)
			formPanel.add(lbl${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}, ${gbc});
   			#end
   			
   			#set( $counterY = 1)
			#foreach($propEntry in $propMap.keySet())
    		txt${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)} = new JTextField(10);
    		#set( $gbc = "gbcTxt${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}" )
    		
    		GridBagConstraints $gbc = new GridBagConstraints();
    		${gbc}.insets = new Insets(0, 0, 5, 5);
			${gbc}.gridx = 4;
			${gbc}.gridy = $counterY;
			#set( $counterY = $counterY+1)
			formPanel.add(txt${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}, ${gbc});
			
   			#end
   			
		JLabel lbl${DOMAIN_CLASS_NAME}Id = new JLabel("${DOMAIN_CLASS_NAME} Id");
		GridBagConstraints gbcLbl${DOMAIN_CLASS_NAME}Id = new GridBagConstraints();
		gbcLbl${DOMAIN_CLASS_NAME}Id.insets = new Insets(0, 0, 5, 5);
		gbcLbl${DOMAIN_CLASS_NAME}Id.gridx = 2;
		gbcLbl${DOMAIN_CLASS_NAME}Id.gridy = 0;
		formPanel.add(lbl${DOMAIN_CLASS_NAME}Id, gbcLbl${DOMAIN_CLASS_NAME}Id);
		
		JTextField txt${DOMAIN_CLASS_NAME}Id = new JTextField(10);
		GridBagConstraints gbcTxt${DOMAIN_CLASS_NAME}Id = new GridBagConstraints();
		gbcTxt${DOMAIN_CLASS_NAME}Id.insets = new Insets(0, 0, 5, 5);
		gbcTxt${DOMAIN_CLASS_NAME}Id.gridx = 4;
		gbcTxt${DOMAIN_CLASS_NAME}Id.gridy = 0;
		formPanel.add(txt${DOMAIN_CLASS_NAME}Id, gbcTxt${DOMAIN_CLASS_NAME}Id);

		JButton btnSave = new JButton("Save");
		btnSave.addActionListener(new SaveActionListener());
		GridBagConstraints gbc_btnSave = new GridBagConstraints();
		gbc_btnSave.insets = new Insets(0, 0, 5, 0);
		gbc_btnSave.gridx = 6;
		gbc_btnSave.gridy = 0;
		formPanel.add(btnSave, gbc_btnSave);

		JButton btnUpdate = new JButton("Update");
		btnUpdate.addActionListener(new UpdateActionListener());
		GridBagConstraints gbc_btnUpdate = new GridBagConstraints();
		gbc_btnUpdate.insets = new Insets(0, 0, 5, 0);
		gbc_btnUpdate.gridx = 6;
		gbc_btnUpdate.gridy = 1;
		formPanel.add(btnUpdate, gbc_btnUpdate);

		JButton btnFind = new JButton("Find");
		btnFind.addActionListener(new FindAllActionListener());
		GridBagConstraints gbc_btnFind = new GridBagConstraints();
		gbc_btnFind.insets = new Insets(0, 0, 5, 0);
		gbc_btnFind.gridx = 6;
		gbc_btnFind.gridy = 2;
		formPanel.add(btnFind, gbc_btnFind);

		JButton btnDelete = new JButton("Delete");
		btnDelete.addActionListener(new DeleteActionListener());
		GridBagConstraints gbc_btnDelete = new GridBagConstraints();
		gbc_btnDelete.gridx = 6;
		gbc_btnDelete.gridy = 3;
		formPanel.add(btnDelete, gbc_btnDelete);

		JPanel resultPanel = new JPanel();
		GridBagConstraints gbc_resultPanel = new GridBagConstraints();
		gbc_resultPanel.anchor = GridBagConstraints.BASELINE;
		gbc_resultPanel.gridwidth = 9;
		gbc_resultPanel.fill = GridBagConstraints.HORIZONTAL;
		gbc_resultPanel.gridx = 3;
		gbc_resultPanel.gridy = 2;
		add(resultPanel, gbc_resultPanel);

		DefaultTableModel model = new DefaultTableModel();
		model.addColumn("Category Id");
		model.addColumn("Category Name");
		model.addColumn("Description");

		${DOMAIN_CLASS_NAME.substring(0,1).toLowerCase()}${DOMAIN_CLASS_NAME.substring(1)}Results = new JTable(model);
		${DOMAIN_CLASS_NAME.substring(0,1).toLowerCase()}${DOMAIN_CLASS_NAME.substring(1)}Results.setPreferredScrollableViewportSize(new Dimension(500, 70));
		${DOMAIN_CLASS_NAME.substring(0,1).toLowerCase()}${DOMAIN_CLASS_NAME.substring(1)}Results.setFillsViewportHeight(true);

		JScrollPane scrollPane = new JScrollPane(${DOMAIN_CLASS_NAME.substring(0,1).toLowerCase()}${DOMAIN_CLASS_NAME.substring(1)}Results);
		resultPanel.add(scrollPane);
		
        			
        }
        
        private class SaveActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {

			#foreach($propEntry in $propMap.keySet())
				$propMap.get($propEntry) $propEntry = txt$propEntry.substring(0,1).toUpperCase()${propEntry.toString().substring(1)}.getText();
    		#end
			
			${DOMAIN_CLASS_NAME}Service service = (${DOMAIN_CLASS_NAME}Service) context
					.getBean("${DOMAIN_CLASS_NAME}Service");
			${DOMAIN_CLASS_NAME} ${DOMAIN_CLASS_NAME.toLowerCase()} = new ${DOMAIN_CLASS_NAME}();
			
			#foreach($propEntry in $propMap.keySet())
    		 ${DOMAIN_CLASS_NAME.toLowerCase()}.set$propEntry.substring(0,1).toUpperCase()$propEntry.toString().substring(1)($propEntry);
    		#end
			service.add(${DOMAIN_CLASS_NAME.toLowerCase()});
			}
		}
		
		private class FindAllActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {

			${DOMAIN_CLASS_NAME}Service service = (${DOMAIN_CLASS_NAME}Service) context
					.getBean("${DOMAIN_CLASS_NAME}Service");
			/*
			 * Get all employees list from database
			 */
			List<${DOMAIN_CLASS_NAME}> ${DOMAIN_CLASS_NAME.toLowerCase()}List = service.getAll();

			DefaultTableModel model = (DefaultTableModel) ${DOMAIN_CLASS_NAME.substring(0,1).toLowerCase()}${DOMAIN_CLASS_NAME.substring(1)}Results.getModel();
			
			for (${DOMAIN_CLASS_NAME} ${DOMAIN_CLASS_NAME.toLowerCase()} : ${DOMAIN_CLASS_NAME.toLowerCase()}List) {

			
			#set($i=0)
			
			Object [] objArr = new Object[] {
			#foreach($propEntry in $propMap.keySet())
    		 	${DOMAIN_CLASS_NAME.toLowerCase()}.get$propEntry.substring(0,1).toUpperCase()$propEntry.toString().substring(1) ( )
	    		 #if($i+1 != $propMap.size()) , #end #set($i = $i+1)
    		#end
    			};
				model.addRow(objArr);
			}

		}
	}
	

	private class UpdateActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {

			//String description = txtDescription.getText();
			//String categoryName = txtCategoryName.getText();
			#foreach($propEntry in $propMap.keySet())
				$propMap.get($propEntry) $propEntry = txt$propEntry.substring(0,1).toUpperCase()${propEntry.toString().substring(1)}.getText();
    		#end

			${DOMAIN_CLASS_NAME}Service service = (${DOMAIN_CLASS_NAME}Service) context
					.getBean("${DOMAIN_CLASS_NAME}Service");
			${DOMAIN_CLASS_NAME} ${DOMAIN_CLASS_NAME.toLowerCase()} = new ${DOMAIN_CLASS_NAME}();
			
			#foreach($propEntry in $propMap.keySet())
    		 ${DOMAIN_CLASS_NAME.toLowerCase()}.set$propEntry.substring(0,1).toUpperCase()$propEntry.toString().substring(1)($propEntry);
    		#end
			service.update(${DOMAIN_CLASS_NAME.toLowerCase()});
		}
	}
	
	private class DeleteActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {

			#foreach($propEntry in $propMap.keySet())
				$propMap.get($propEntry) $propEntry = txt$propEntry.substring(0,1).toUpperCase()${propEntry.toString().substring(1)}.getText();
    		#end

			${DOMAIN_CLASS_NAME}Service service = (${DOMAIN_CLASS_NAME}Service) context
					.getBean("${DOMAIN_CLASS_NAME}Service");
			${DOMAIN_CLASS_NAME} ${DOMAIN_CLASS_NAME.toLowerCase()} = new ${DOMAIN_CLASS_NAME}();
			
			#foreach($propEntry in $propMap.keySet())
    		 ${DOMAIN_CLASS_NAME.toLowerCase()}.set$propEntry.substring(0,1).toUpperCase()$propEntry.toString().substring(1)($propEntry);
    		#end
			service.remove(${DOMAIN_CLASS_NAME.toLowerCase()});
		}
	}
}
