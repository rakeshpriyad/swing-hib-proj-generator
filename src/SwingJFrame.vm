#if (${PACKAGE_NAME} != "")package ${PACKAGE_NAME}.form;#end

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import org.joda.time.LocalDate;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;

import com.test.swing.spring.configuration.AppConfig;
import com.test.swing.spring.domain.${DOMAIN_CLASS_NAME};
import com.test.swing.spring.service.${DOMAIN_CLASS_NAME}Service;


public class ${DOMAIN_CLASS_NAME}Form  extends JPanel {

	private JPanel contentPane;
	
	#foreach($propEntry in $propMap.keySet())
    private JLabel lbl${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)};
    #end
    
    #foreach($propEntry in $propMap.keySet())
    private JTextField txt$propEntry.substring(0,1).toUpperCase()${propEntry.toString().substring(1)};
    
    #end
	
	private JPanel pnlResults;
	private JTable table;
	
	private AbstractApplicationContext context;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					${DOMAIN_CLASS_NAME}Form frame = new ${DOMAIN_CLASS_NAME}Form();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
    #foreach( $str_const in $constMap.keySet() )
    private static final String $str_const =  "$constMap.get($str_const)";
    #end
    
        public ${DOMAIN_CLASS_NAME}Form(){
        
        	context = new AnnotationConfigApplicationContext(AppConfig.class);
	        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			setBounds(100, 100, 450, 300);
			contentPane = new JPanel();
			contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
			contentPane.setLayout(new BorderLayout(0, 0));
			//setContentPane(contentPane);
			
			JPanel panel = new JPanel();
			contentPane.add(panel, BorderLayout.CENTER);
			GridBagLayout gbl_panel = new GridBagLayout();
			gbl_panel.columnWidths = new int[]{0, 0, 0, 0, 0, 0, 0, 0};
			gbl_panel.rowHeights = new int[]{0, 0, 0, 0, 0, 0, 0};
			gbl_panel.columnWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, Double.MIN_VALUE};
			gbl_panel.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
			panel.setLayout(gbl_panel);
			
			JLabel lblHeader = new JLabel("${DOMAIN_CLASS_NAME} Form");
			GridBagConstraints gbc_lblHeader = new GridBagConstraints();
			gbc_lblHeader.gridwidth = 2;
			gbc_lblHeader.insets = new Insets(0, 0, 5, 5);
			gbc_lblHeader.gridx = 4;
			gbc_lblHeader.gridy = 0;
			panel.add(lblHeader, gbc_lblHeader);
			
						
			#set( $counterY = 1)
			#foreach($propEntry in $propMap.keySet())
    		lbl${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)} = new JLabel("${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}");
    		#set( $gbc = "gbcLbl${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}" )
    		
    		GridBagConstraints $gbc = new GridBagConstraints();
    		${gbc}.insets = new Insets(0, 0, 5, 5);
			${gbc}.fill = GridBagConstraints.HORIZONTAL;
			${gbc}.gridx = 4;
			${gbc}.gridy = $counterY;
			#set( $counterY = $counterY+1)
			panel.add(lbl${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}, ${gbc});
   			#end
   			
			
			#set( $counterY = 1)
			#foreach($propEntry in $propMap.keySet())
    		txt${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)} = new JTextField();
    		#set( $gbc = "gbcTxt${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}" )
    		
    		GridBagConstraints $gbc = new GridBagConstraints();
    		${gbc}.insets = new Insets(0, 0, 5, 0);
			${gbc}.fill = GridBagConstraints.HORIZONTAL;
			${gbc}.gridx = 6;
			${gbc}.gridy = $counterY;
			#set( $counterY = $counterY+1)
			panel.add(txt${propEntry.substring(0,1).toUpperCase()}${propEntry.toString().substring(1)}, ${gbc});
			txt$propEntry.substring(0,1).toUpperCase()${propEntry.toString().substring(1)}.setColumns(10);
   			#end
		
			DefaultTableModel model = new DefaultTableModel();
			model.addColumn("Emp Id");
			model.addColumn("Emp Name");
			model.addColumn("Date of Joining");
			model.addColumn("Salary");
			model.addColumn("SSN");
	
			table = new JTable(model);
			table.setPreferredScrollableViewportSize(new Dimension(500, 70));
			table.setFillsViewportHeight(true);
			
			pnlResults = new JPanel();
			GridBagConstraints gbc_pnlResults = new GridBagConstraints();
			gbc_pnlResults.gridwidth = 7;
			gbc_pnlResults.insets = new Insets(0, 0, 0, 5);
			gbc_pnlResults.fill = GridBagConstraints.BOTH;
			gbc_pnlResults.gridx = 0;
			gbc_pnlResults.gridy = 6;
			panel.add(pnlResults, gbc_pnlResults);
			// Create the scroll pane and add the table to it.
			JScrollPane scrollPane = new JScrollPane(table);
			pnlResults.add(scrollPane);
			
			
			JButton btnFind = new JButton("Find");
			btnFind.addActionListener(new FindAllActionListener());
			GridBagConstraints gbc_btnFind = new GridBagConstraints();
			gbc_btnFind.insets = new Insets(0, 0, 5, 5);
			gbc_btnFind.gridx = 4;
			gbc_btnFind.gridy = 5;
			panel.add(btnFind, gbc_btnFind);
			
			JButton btnSave = new JButton("Save");
			btnSave.addActionListener(new SaveActionListener());
			GridBagConstraints gbc_btnSave = new GridBagConstraints();
			gbc_btnSave.gridx = 6;
			gbc_btnSave.gridy = 5;
			panel.add(btnSave, gbc_btnSave);
        }
        
        private class SaveActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {

			#foreach($propEntry in $propMap.keySet())
				$propMap.get($propEntry) $propEntry = txt$propEntry.substring(0,1).toUpperCase()${propEntry.toString().substring(1)}.getText();
    		#end
			
			${DOMAIN_CLASS_NAME}Service service = (${DOMAIN_CLASS_NAME}Service) context
					.getBean("${DOMAIN_CLASS_NAME}Service");
			${DOMAIN_CLASS_NAME} ${DOMAIN_CLASS_NAME.toLowerCase()} = new ${DOMAIN_CLASS_NAME}();
			
			#foreach($propEntry in $propMap.keySet())
    		 ${DOMAIN_CLASS_NAME.toLowerCase()}.set$propEntry.substring(0,1).toUpperCase()$propEntry.toString().substring(1)($propEntry);
    		#end
			service.add(${DOMAIN_CLASS_NAME.toLowerCase()});
			//txtEmpId.setText(""+employee.getId());
			}
		}
		
		private class FindAllActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {

			${DOMAIN_CLASS_NAME}Service service = (${DOMAIN_CLASS_NAME}Service) context
					.getBean("${DOMAIN_CLASS_NAME}Service");
			/*
			 * Get all employees list from database
			 */
			List<${DOMAIN_CLASS_NAME}> ${DOMAIN_CLASS_NAME.toLowerCase()}List = service.getAll();

			DefaultTableModel model = (DefaultTableModel) table.getModel();
			
			for (${DOMAIN_CLASS_NAME} ${DOMAIN_CLASS_NAME.toLowerCase()} : ${DOMAIN_CLASS_NAME.toLowerCase()}List) {

			
			#set($i=0)
			
			Object [] objArr = new Object[] {
			#foreach($propEntry in $propMap.keySet())
    		 	${DOMAIN_CLASS_NAME.toLowerCase()}.get$propEntry.substring(0,1).toUpperCase()$propEntry.toString().substring(1) ( )
	    		 #if($i+1 != $propMap.size()) , #end #set($i = $i+1)
    		#end
    			};
				model.addRow(objArr);
			}

		}
	}
   
}
